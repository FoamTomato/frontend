<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ip地址白名单校验</title>
    <url>/2022/04/04/ip%E5%9C%B0%E5%9D%80%E7%99%BD%E5%90%8D%E5%8D%95%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service.taobao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WhiteIPInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> //TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> yinjuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022-01-12 16:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhiteIPInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// IP的正则</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern pattern = Pattern</span><br><span class="line">            .compile(<span class="string">&quot;(1\\d&#123;1,2&#125;|2[0-4]\\d|25[0-5]|\\d&#123;1,2&#125;)\\.&quot;</span> + <span class="string">&quot;(1\\d&#123;1,2&#125;|2[0-4]\\d|25[0-5]|\\d&#123;1,2&#125;)\\.&quot;</span></span><br><span class="line">                    + <span class="string">&quot;(1\\d&#123;1,2&#125;|2[0-4]\\d|25[0-5]|\\d&#123;1,2&#125;)\\.&quot;</span> + <span class="string">&quot;(1\\d&#123;1,2&#125;|2[0-4]\\d|25[0-5]|\\d&#123;1,2&#125;)&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ALLOW_ALL_FLAG = <span class="string">&quot;*&quot;</span>;	<span class="comment">// 允许所有ip标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_DENY_ALL_FLAG = <span class="string">&quot;0&quot;</span>; 	<span class="comment">// 禁止所有ip标志位</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 获取访问的ip地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getIpAddr</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String ip = request.getHeader(<span class="string">&quot;X-Forwarded-For&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;HTTP_CLIENT_IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;0:0:0:0:0:0:0:1&quot;</span>.equals(ip)) &#123;</span><br><span class="line">            ip = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据IP白名单设置获取可用的IP列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> allowIp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getAvaliIpList</span><span class="params">(String allowIp)</span> </span>&#123;</span><br><span class="line">        String[] splitRex = allowIp.split(<span class="string">&quot;;&quot;</span>);<span class="comment">// 拆分出白名单正则</span></span><br><span class="line">        Set&lt;String&gt; ipList = <span class="keyword">new</span> HashSet&lt;String&gt;(splitRex.length);</span><br><span class="line">        <span class="keyword">for</span> (String allow : splitRex) &#123;</span><br><span class="line">            allow = allow.trim();</span><br><span class="line">            <span class="keyword">if</span> (allow.contains(<span class="string">&quot;*&quot;</span>)) &#123;<span class="comment">// 处理通配符 *</span></span><br><span class="line">                String[] ips = allow.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">                String[] from = <span class="keyword">new</span> String[] &#123; <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span> &#125;;</span><br><span class="line">                String[] end = <span class="keyword">new</span> String[] &#123; <span class="string">&quot;255&quot;</span>, <span class="string">&quot;255&quot;</span>, <span class="string">&quot;255&quot;</span>, <span class="string">&quot;255&quot;</span> &#125;;</span><br><span class="line">                List&lt;String&gt; tem = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ips.length; i++)</span><br><span class="line">                    <span class="keyword">if</span> (ips[i].indexOf(<span class="string">&quot;*&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                        tem = complete(ips[i]);</span><br><span class="line">                        from[i] = <span class="keyword">null</span>;</span><br><span class="line">                        end[i] = <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        from[i] = ips[i];</span><br><span class="line">                        end[i] = ips[i];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                StringBuilder fromIP = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                StringBuilder endIP = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                    <span class="keyword">if</span> (from[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        fromIP.append(from[i]).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                        endIP.append(end[i]).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        fromIP.append(<span class="string">&quot;[*].&quot;</span>);</span><br><span class="line">                        endIP.append(<span class="string">&quot;[*].&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                fromIP.deleteCharAt(fromIP.length() - <span class="number">1</span>);</span><br><span class="line">                endIP.deleteCharAt(endIP.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (String s : tem) &#123;</span><br><span class="line">                    String ip = fromIP.toString().replace(<span class="string">&quot;[*]&quot;</span>, s.split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>]) + <span class="string">&quot;-&quot;</span></span><br><span class="line">                            + endIP.toString().replace(<span class="string">&quot;[*]&quot;</span>, s.split(<span class="string">&quot;;&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (validate(ip)) &#123;</span><br><span class="line">                        ipList.add(ip);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (allow.contains(<span class="string">&quot;/&quot;</span>)) &#123;<span class="comment">// 处理 网段 xxx.xxx.xxx./24</span></span><br><span class="line">                ipList.add(allow);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 处理单个 ip 或者 范围</span></span><br><span class="line">                <span class="keyword">if</span> (validate(allow)) &#123;</span><br><span class="line">                    ipList.add(allow);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ipList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 	对单个IP节点进行范围限定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回限定后的IP范围，格式为List[10;19, 100;199]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">complete</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; com = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = arg.length();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">            com.add(<span class="string">&quot;0;255&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">2</span>) &#123;</span><br><span class="line">            String s1 = complete(arg, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (s1 != <span class="keyword">null</span>)</span><br><span class="line">                com.add(s1);</span><br><span class="line">            String s2 = complete(arg, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (s2 != <span class="keyword">null</span>)</span><br><span class="line">                com.add(s2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String s1 = complete(arg, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (s1 != <span class="keyword">null</span>)</span><br><span class="line">                com.add(s1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> com;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">complete</span><span class="params">(String arg, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        String from = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String end = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">            from = arg.replace(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">            end = arg.replace(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;9&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            from = arg.replace(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;00&quot;</span>);</span><br><span class="line">            end = arg.replace(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;99&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Integer.valueOf(from) &gt; <span class="number">255</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (Integer.valueOf(end) &gt; <span class="number">255</span>)</span><br><span class="line">            end = <span class="string">&quot;255&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> from + <span class="string">&quot;;&quot;</span> + end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *	 在添加至白名单时进行格式校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        String[] temp = ip.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : temp)</span><br><span class="line">            <span class="keyword">if</span> (!pattern.matcher(s).matches()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 	根据IP,及可用Ip列表来判断ip是否包含在白名单之中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ipList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPermited</span><span class="params">(String ip, Set&lt;String&gt; ipList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ipList.isEmpty() || ipList.contains(ip))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (String allow : ipList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow.indexOf(<span class="string">&quot;-&quot;</span>) &gt; -<span class="number">1</span>) &#123;<span class="comment">// 处理 类似 192.168.0.0-192.168.2.1</span></span><br><span class="line">                String[] tempAllow = allow.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">                String[] from = tempAllow[<span class="number">0</span>].split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">                String[] end = tempAllow[<span class="number">1</span>].split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">                String[] tag = ip.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">                <span class="keyword">boolean</span> check = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;<span class="comment">// 对IP从左到右进行逐段匹配</span></span><br><span class="line">                    <span class="keyword">int</span> s = Integer.valueOf(from[i]);</span><br><span class="line">                    <span class="keyword">int</span> t = Integer.valueOf(tag[i]);</span><br><span class="line">                    <span class="keyword">int</span> e = Integer.valueOf(end[i]);</span><br><span class="line">                    <span class="keyword">if</span> (!(s &lt;= t &amp;&amp; t &lt;= e)) &#123;</span><br><span class="line">                        check = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (check)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (allow.contains(<span class="string">&quot;/&quot;</span>)) &#123;<span class="comment">// 处理 网段 xxx.xxx.xxx./24</span></span><br><span class="line">                <span class="keyword">int</span> splitIndex = allow.indexOf(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                <span class="comment">// 取出子网段</span></span><br><span class="line">                String ipSegment = allow.substring(<span class="number">0</span>, splitIndex); <span class="comment">// 192.168.3.0</span></span><br><span class="line">                <span class="comment">// 子网数</span></span><br><span class="line">                String netmask = allow.substring(splitIndex + <span class="number">1</span>);<span class="comment">// 24</span></span><br><span class="line">                <span class="comment">// ip 转二进制</span></span><br><span class="line">                <span class="keyword">long</span> ipLong = ipToLong(ip);</span><br><span class="line">                <span class="comment">//子网二进制</span></span><br><span class="line">                <span class="keyword">long</span> maskLong=(<span class="number">2L</span>&lt;&lt;<span class="number">32</span> -<span class="number">1</span>) -(<span class="number">2L</span> &lt;&lt; Integer.valueOf(<span class="number">32</span>-Integer.valueOf(netmask))-<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// ip与和子网相与 得到 网络地址</span></span><br><span class="line">                String calcSegment = longToIP(ipLong &amp; maskLong);</span><br><span class="line">                <span class="comment">// 如果计算得出网络地址和库中网络地址相同 则合法</span></span><br><span class="line">                <span class="keyword">if</span>(ipSegment.equals(calcSegment))<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 	根据IP地址，及IP白名单设置规则判断IP是否包含在白名单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ipWhiteConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPermitedByRequest</span><span class="params">(HttpServletRequest request, String ipWhiteConfig)</span> </span>&#123;</span><br><span class="line">        String ip = getIpAddr(request);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == ip || <span class="string">&quot;&quot;</span>.equals(ip) || <span class="keyword">null</span> == ipWhiteConfig)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//ip格式不对</span></span><br><span class="line">        <span class="keyword">if</span>(!pattern.matcher(ip).matches()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (DEFAULT_ALLOW_ALL_FLAG.equals(ipWhiteConfig))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (DEFAULT_DENY_ALL_FLAG.equals(ipWhiteConfig))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Set&lt;String&gt; ipList = getAvaliIpList(ipWhiteConfig.replaceAll(<span class="string">&quot;；&quot;</span>, <span class="string">&quot;;&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> isPermited(ip, ipList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 	根据IP地址，及IP白名单设置规则判断IP是否包含在白名单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ipWhiteConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPermited</span><span class="params">(String ip, String ipWhiteConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == ip || <span class="string">&quot;&quot;</span>.equals(ip) || <span class="keyword">null</span> == ipWhiteConfig)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//ip格式不对</span></span><br><span class="line">        <span class="keyword">if</span>(!pattern.matcher(ip).matches()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (DEFAULT_ALLOW_ALL_FLAG.equals(ipWhiteConfig))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (DEFAULT_DENY_ALL_FLAG.equals(ipWhiteConfig))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Set&lt;String&gt; ipList = getAvaliIpList(ipWhiteConfig.replaceAll(<span class="string">&quot;；&quot;</span>, <span class="string">&quot;;&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> isPermited(ip, ipList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">ipToLong</span><span class="params">(String strIP)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span>[] ip = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="comment">// 先找到IP地址字符串中.的位置</span></span><br><span class="line">        <span class="keyword">int</span> position1 = strIP.indexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> position2 = strIP.indexOf(<span class="string">&quot;.&quot;</span>, position1 + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> position3 = strIP.indexOf(<span class="string">&quot;.&quot;</span>, position2 + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 将每个.之间的字符串转换成整型</span></span><br><span class="line">        ip[<span class="number">0</span>] = Long.parseLong(strIP.substring(<span class="number">0</span>, position1));</span><br><span class="line">        ip[<span class="number">1</span>] = Long.parseLong(strIP.substring(position1 + <span class="number">1</span>, position2));</span><br><span class="line">        ip[<span class="number">2</span>] = Long.parseLong(strIP.substring(position2 + <span class="number">1</span>, position3));</span><br><span class="line">        ip[<span class="number">3</span>] = Long.parseLong(strIP.substring(position3 + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> (ip[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) + (ip[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) + (ip[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ip[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将10进制整数形式转换成127.0.0.1形式的IP地址</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">longToIP</span><span class="params">(<span class="keyword">long</span> longIP)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 直接右移24位</span></span><br><span class="line">        sb.append(String.valueOf(longIP &gt;&gt;&gt; <span class="number">24</span>));</span><br><span class="line">        sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="comment">// 将高8位置0，然后右移16位</span></span><br><span class="line">        sb.append(String.valueOf((longIP &amp; <span class="number">0x00FFFFFF</span>) &gt;&gt;&gt; <span class="number">16</span>));</span><br><span class="line">        sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        sb.append(String.valueOf((longIP &amp; <span class="number">0x0000FFFF</span>) &gt;&gt;&gt; <span class="number">8</span>));</span><br><span class="line">        sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        sb.append(String.valueOf(longIP &amp; <span class="number">0x000000FF</span>));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String ipWhilte = <span class="string">&quot;1.168.1.1;&quot;</span> <span class="comment">//设置单个IP的白名单 //</span></span><br><span class="line">                + <span class="string">&quot;192.*； &quot;</span> <span class="comment">//设置ip通配符,对一个ip段进行匹配</span></span><br><span class="line">                + <span class="string">&quot;192.168.1.1-192.168.1.3； &quot;</span> <span class="comment">//设置一个IP范围</span></span><br><span class="line">                + <span class="string">&quot;25.168.4.0/24 &quot;</span>; <span class="comment">//設置一个网段</span></span><br><span class="line">        System.out.println(WhiteIPInterceptor.isPermited(<span class="string">&quot;192.168.1.1&quot;</span>,ipWhilte));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ip</tag>
        <tag>白名单</tag>
        <tag>校验</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java文件用GZip压缩gz</title>
    <url>/2022/04/04/java%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p>描述：利用Gzip进行文件压缩</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.GZIPInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.GZIPOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GZipUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXT = <span class="string">&quot;.gz&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       String userHome = System.getProperties().getProperty(<span class="string">&quot;user.home&quot;</span>); <span class="comment">// 用户目录，如：C:\Users\chushiyun</span></span><br><span class="line">       String fileName = userHome+<span class="string">&quot;/01.jpg&quot;</span>; <span class="comment">// 用户目录下的01.jpg 会被压缩成01.jpg.gz</span></span><br><span class="line">       compress(<span class="keyword">new</span> File(fileName));</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] compress(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(data);</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 压缩</span></span><br><span class="line">        compress(bais, baos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] output = baos.toByteArray();</span><br><span class="line"></span><br><span class="line">        baos.flush();</span><br><span class="line">        baos.close();</span><br><span class="line"></span><br><span class="line">        bais.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        compress(file, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delete</span></span><br><span class="line"><span class="comment">     *            是否删除原始文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(File file, <span class="keyword">boolean</span> delete)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file.getPath() + EXT);</span><br><span class="line"></span><br><span class="line">        compress(fis, fos);</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">        fos.flush();</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (delete) &#123;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(InputStream is, OutputStream os)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        GZIPOutputStream gos = <span class="keyword">new</span> GZIPOutputStream(os);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">byte</span> data[] = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER];</span><br><span class="line">        <span class="keyword">while</span> ((count = is.read(data, <span class="number">0</span>, BUFFER)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            gos.write(data, <span class="number">0</span>, count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        gos.finish();</span><br><span class="line"></span><br><span class="line">        gos.flush();</span><br><span class="line">        gos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        compress(path, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delete</span></span><br><span class="line"><span class="comment">     *            是否删除原始文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(String path, <span class="keyword">boolean</span> delete)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        compress(file, delete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据解压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decompress(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(data);</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解压缩</span></span><br><span class="line"></span><br><span class="line">        decompress(bais, baos);</span><br><span class="line"></span><br><span class="line">        data = baos.toByteArray();</span><br><span class="line"></span><br><span class="line">        baos.flush();</span><br><span class="line">        baos.close();</span><br><span class="line"></span><br><span class="line">        bais.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件解压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompress</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        decompress(file, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件解压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delete</span></span><br><span class="line"><span class="comment">     *            是否删除原始文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompress</span><span class="params">(File file, <span class="keyword">boolean</span> delete)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file.getPath().replace(EXT,</span><br><span class="line">                <span class="string">&quot;&quot;</span>));</span><br><span class="line">        decompress(fis, fos);</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.flush();</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (delete) &#123;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据解压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompress</span><span class="params">(InputStream is, OutputStream os)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        GZIPInputStream gis = <span class="keyword">new</span> GZIPInputStream(is);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">byte</span> data[] = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER];</span><br><span class="line">        <span class="keyword">while</span> ((count = gis.read(data, <span class="number">0</span>, BUFFER)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(data, <span class="number">0</span>, count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        gis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件解压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompress</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        decompress(path, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件解压缩</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delete</span></span><br><span class="line"><span class="comment">     *            是否删除原始文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompress</span><span class="params">(String path, <span class="keyword">boolean</span> delete)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        decompress(file, delete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>gzip</tag>
        <tag>压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>redis存储Data truncation: Incorrect datetime value</title>
    <url>/2022/03/07/redis%E5%AD%98%E5%82%A8Data-truncation-Incorrect-datetime-value/</url>
    <content><![CDATA[<p>最近在编写项目时，用redis存储结果一直报转换异常<br><img src="https://gitee.com/foam077/images/raw/master/img/f0a78853cfed40ad8b8a8b35800a7f52.png/" alt="在这里插入图片描述"><br>对此我有了以下思路<br>1.在mysql进行格式转换<br>2.在java先转换<br>3.存json之前就进行格式转换</p>
<p>但是以上方法都不行，因为数据需要的是date类型，如果走转换又过慢<br><img src="https://gitee.com/foam077/images/raw/master/img/374ed7336a77406f90aa8dc2ea8b4530.png/" alt="在这里插入图片描述"><br>有大佬提了一下使用序列化解决，我就尝试了一下，还真可以,以下是我编写思路<br>1.首先需要序列化的类继承Serializable接口<br><img src="https://gitee.com/foam077/images/raw/master/img/aeb43a6c0aef4058802e25afc80b6253.png/" alt="在这里插入图片描述"><br>2.编写序列化工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tiantai.policy.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object object) &#123;</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">            oos.writeObject(object);</span><br><span class="line">            bytes = baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;序列化失败&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bais = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;反序列化失败&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.使用序列化存储</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Integer , Object&gt; objectObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                                objectObjectHashMap.put(airChannelEnum.getType(), SerializeUtil.serialize(selectPage));</span><br><span class="line">                                redisTemplate.opsForList().leftPush(<span class="string">&quot;error&quot;</span>,gson.toJson(objectObjectHashMap));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/foam077/images/raw/master/img/cb7066c9f316480a85b9e0864992880e.png/" alt="在这里插入图片描述"><br>4.反序列化读取<br><img src="https://gitee.com/foam077/images/raw/master/img/a2bbe2c6ba594e29a77afa1c7016881b.png/" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page deserialize = (Page)SerializeUtil.deserialize(entry.getValue());</span><br></pre></td></tr></table></figure>
<p>第一个红框是我用gson进行json转换<br>第二个红框是序列化后强转为原对象</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>redis</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>redis锁</title>
    <url>/2022/02/23/redis%E9%94%81/</url>
    <content><![CDATA[<p>暂时没时间整细节，给个粗略的记录一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.util.qunar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.service.qunar.FQunarSearchService;</span><br><span class="line"><span class="keyword">import</span> com.service.zl.ValidationCabinAndPrice_QNR;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_TITLE = <span class="string">&quot;QNRLock_&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeOutSecond</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">acquireSecond</span><span class="params">(String lockName, Integer waitTime, Integer timeOutSecond)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String key = LOCK_TITLE + lockName;</span><br><span class="line">            RLock mylock = redisLock().getLock(key);</span><br><span class="line">            <span class="comment">//lock提供带timeout参数，timeout结束强制解锁，防止死锁</span></span><br><span class="line">            <span class="comment">//先尝试在超时时间内获取锁，如果没有获取到，此时如果等待时间还有剩余进入循环不断取尝试获取锁 直到时间结束退出  循环中是订阅，时间结束取消订阅</span></span><br><span class="line">            <span class="keyword">return</span> mylock.tryLock(waitTime, timeOutSecond, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RedissonClient <span class="title">redisLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(redissonClient == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (FQunarSearchService.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(redissonClient == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    Config config = <span class="keyword">new</span> Config();</span><br><span class="line">                    config.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class="line">                            .setPassword(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">                            .setDatabase(<span class="number">17</span>);</span><br><span class="line">                    redissonClient = Redisson.create(config);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(String lockName)</span></span>&#123;</span><br><span class="line">        String key = LOCK_TITLE + lockName;</span><br><span class="line">        RLock mylock = redissonClient.getLock(key);</span><br><span class="line">        mylock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>redis</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>使用redis实现分布式锁</title>
    <url>/2022/03/02/%E4%BD%BF%E7%94%A8redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<blockquote>
<p>Java中提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下合理选择能展现非常高的效率</p>
</blockquote>
<p>分布式锁一般有三种实现方式：<code>数据库乐观锁</code>，<code>Redis分布式锁</code>，<code>Zookeeper分布式锁</code></p>
<p>本篇博客主要详细介绍redis分布式锁的进化，进化所解决的场景问题</p>
<h2 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h2><p>首先，为了确保分布式锁的可用性，我们需要确保锁能同时满足以下四个条件</p>
<ol>
<li><code>互斥性</code>:在任意时刻，只有一个客户端能持有锁。</li>
<li><code>不会发生死锁</code>:即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li>
<li><code>具有容错性</code>:只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。</li>
<li><code>解铃还须系铃人</code>:加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</li>
</ol>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>在单机下可以用synchronized同步代码块加锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductStock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> stock = Integer.parseInt(redisTemplate.opsForValue().get(<span class="string">&quot;stock&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> realStock = stock - <span class="number">1</span>;</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;stock&quot;</span>,realStock + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减成功，剩余库存：&quot;</span> + realStock);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减失败，库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是在真实的场景下，往往是多台服务器做负载，而synchronized是进程级别的，只在当前进程有效</p>
<p>如果是做了负载的服务器，往往控制不住请求，依然会有并发问题，在并发低的情况下可能不会出现问题</p>
<p>这种情况下就得用分布式锁</p>
<p>在redis中，利用<code>setnx</code>命令的特性可以轻松实现分布式锁</p>
<blockquote>
<p>只在键 key 不存在的情况下，将键 key 的值设置为 value 。若键 key 已经存在， 则 SETNX 命令不做任何动作。</p>
<p>返回值：命令在设置成功时返回 1 ，设置失败时返回 0 。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190303135212531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rhem91MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductStock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String locKey = <span class="string">&quot;lockey&quot;</span>;</span><br><span class="line">    <span class="comment">// 如果存在则true,成功则新增返回false</span></span><br><span class="line">    Boolean result = redisTemplate.opsForValue().setIfAbsent(locKey, <span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    <span class="comment">// 如果存在，直接返回失败</span></span><br><span class="line">    <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;error_code&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> stock = Integer.parseInt(redisTemplate.opsForValue().get(<span class="string">&quot;stock&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> realStock = stock - <span class="number">1</span>;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;stock&quot;</span>,realStock + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;扣减成功，剩余库存：&quot;</span> + realStock);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扣减失败，库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除key，表示已经解锁</span></span><br><span class="line">    redisTemplate.delete(locKey);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码是简单的redis锁，如果在加锁和解锁中间，出现了异常，则redis里面会一直加上这把锁</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220302215144457.png/" alt="image-20220302215144457"></p>
<p>所以升级一下，让我们的代码更健壮，使用try catch finally  保证一定会释放锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductStock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String locKey = <span class="string">&quot;lockey&quot;</span>;</span><br><span class="line">    <span class="comment">// 如果存在则true,成功则新增返回false</span></span><br><span class="line">    Boolean result = redisTemplate.opsForValue().setIfAbsent(locKey, <span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    <span class="comment">// 如果存在，直接返回失败</span></span><br><span class="line">    <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;error_code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> stock = Integer.parseInt(redisTemplate.opsForValue().get(<span class="string">&quot;stock&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> realStock = stock - <span class="number">1</span>;</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;stock&quot;</span>,realStock + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减成功，剩余库存：&quot;</span> + realStock);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减失败，库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    	<span class="comment">// 删除key，表示已经解锁</span></span><br><span class="line">        redisTemplate.delete(locKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在这个时候，redis宕机了，依然会出现一直锁死的情况</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220302215511149.png/" alt="image-20220302215511149"></p>
<p>这个时候我们可以给锁设置一个超时时间，这样可以保证锁自动释放，不会一直锁死</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductStock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String locKey = <span class="string">&quot;lockey&quot;</span>;</span><br><span class="line">    <span class="comment">// 如果存在则true,成功则新增返回false</span></span><br><span class="line">    Boolean result = redisTemplate.opsForValue().setIfAbsent(locKey, <span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置超时时间，防止锁一直不释放</span></span><br><span class="line">    redisTemplate.expire(locKey,<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 如果存在，直接返回失败</span></span><br><span class="line">    <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;error_code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> stock = Integer.parseInt(redisTemplate.opsForValue().get(<span class="string">&quot;stock&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> realStock = stock - <span class="number">1</span>;</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;stock&quot;</span>,realStock + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减成功，剩余库存：&quot;</span> + realStock);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减失败，库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 删除key，表示已经解锁</span></span><br><span class="line">        redisTemplate.delete(locKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码看起来没有问题，但是实际会存在原子性问题</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220302220141345.png/" alt="image-20220302220141345"></p>
<p>这时候我们可以把</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redisTemplate.opsForValue().setIfAbsent(locKey, <span class="string">&quot;lock&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>替换为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redisTemplate.opsForValue().setIfAbsent(locKey, <span class="string">&quot;lock&quot;</span>,<span class="number">10</span>,TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductStock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String locKey = <span class="string">&quot;lockey&quot;</span>;</span><br><span class="line">    <span class="comment">// 如果存在则true,成功则新增返回false,设置超时时间，防止锁一直不释放</span></span><br><span class="line">    Boolean result = redisTemplate.opsForValue().setIfAbsent(locKey, <span class="string">&quot;lock&quot;</span>,<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 如果存在，直接返回失败</span></span><br><span class="line">    <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;error_code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> stock = Integer.parseInt(redisTemplate.opsForValue().get(<span class="string">&quot;stock&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> realStock = stock - <span class="number">1</span>;</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;stock&quot;</span>,realStock + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减成功，剩余库存：&quot;</span> + realStock);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减失败，库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 删除key，表示已经解锁</span></span><br><span class="line">        redisTemplate.delete(locKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码在高并发场景会存在问题</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220302221610591.png/" alt="image-20220302221610591"></p>
<p>如果存在上面这种情况，则永远加不上锁，前面的用户，会一直释放后面用户的锁，会存在超卖的问题</p>
<p>这时我们就需要用到uuid来进行加锁<code>解铃还须系铃人</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductStock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String locKey = <span class="string">&quot;lockey&quot;</span>;</span><br><span class="line">    <span class="comment">// 增加uuid防止被其他用户释放锁</span></span><br><span class="line">    String clientId = UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">// 如果存在则true,成功则新增返回false,设置超时时间，防止锁一直不释放</span></span><br><span class="line">    Boolean result = redisTemplate.opsForValue().setIfAbsent(locKey, clientId,<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 如果存在，直接返回失败</span></span><br><span class="line">    <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;error_code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> stock = Integer.parseInt(redisTemplate.opsForValue().get(<span class="string">&quot;stock&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> realStock = stock - <span class="number">1</span>;</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;stock&quot;</span>,realStock + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减成功，剩余库存：&quot;</span> + realStock);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减失败，库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 如果uuid相同则释放锁</span></span><br><span class="line">        <span class="keyword">if</span>(clientId.equals(redisTemplate.opsForValue().get(locKey)))&#123;</span><br><span class="line">            <span class="comment">// 删除key，表示已经解锁</span></span><br><span class="line">            redisTemplate.delete(locKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码解决了锁被其他人释放的问题，但是还是会存在一些问题</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220302224427117.png/" alt="image-20220302224427117"></p>
<p>很多人想的是对于超时时间，可以设置长一点，但是这种情况治标不治本，还是会有可能出现</p>
<p>以上这种情况需要用到<code>锁续命</code>，后台开一个定时任务，每过一段时间检查锁的业务是否还在执行，如果没执行完，就重置锁的超时时间</p>
<p>市面上有很多大牛对于这种情况提供了 解决方案</p>
<h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2><p>我们可以使用redisson来使用分布式锁，简化了我们加锁的步骤</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Redisson <span class="title">redisson</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 单机模式</span></span><br><span class="line">    Config config = <span class="keyword">new</span>  Config();</span><br><span class="line">    config.useSingleServer().setAddress(<span class="string">&quot;redis://localhost:6379&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> (Redisson)Redisson.create(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Redisson redisson;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductStock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String locKey = <span class="string">&quot;lockey&quot;</span>;</span><br><span class="line">    RLock lock = redisson.getLock(locKey);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">int</span> stock = Integer.parseInt(redisTemplate.opsForValue().get(<span class="string">&quot;stock&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(stock &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> realStock = stock - <span class="number">1</span>;</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;stock&quot;</span>,realStock + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减成功，剩余库存：&quot;</span> + realStock);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;扣减失败，库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要是通过lua脚本实现代码的原子性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">RFuture&lt;T&gt; <span class="title">tryLockInnerAsync</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit, <span class="keyword">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">                <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/foam077/images/raw/master/img/1090617-20190618183025891-1248337684.jpg/" alt="img"></p>
<p>1.加锁机制：</p>
<p>线程去获取锁，获取成功：执行lua脚本，保存数据到redis数据库</p>
<p>线程去获取锁，获取失败: 一直通过while循环尝试获取锁，获取成功后，执行lua脚本，保存数据到redis数据库。</p>
<p>2.看门狗</p>
<p>在一个分布式环境下，假如一个线程获得锁后，突然服务器宕机了，那么这个时候在一定时间后这个锁会自动释放，你也可以设置锁的有效时间(不设置默认30秒），这样的目的主要是防止死锁的发生。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//设置锁1秒过去</span></span><br><span class="line">redissonLock.lock(<span class="string">&quot;redisson&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 业务逻辑需要咨询2秒</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">redissonLock.release(<span class="string">&quot;redisson&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 线程1 进来获得锁后，线程一切正常并没有宕机，但它的业务逻辑需要执行2秒，这就会有个问题，在 线程1 执行1秒后，这个锁就自动过期了</span></span><br><span class="line"><span class="comment">* 那么这个时候 线程2 进来了。那么就存在 线程1和线程2 同时在这段业务逻辑里执行代码，这当然是不合理的。</span></span><br><span class="line"><span class="comment">* 而且如果是这种情况，那么在解锁时系统会抛异常，因为解锁和加锁已经不是同一线程了，具体后面代码演示。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>所以这个时候<code>看门狗</code>就出现了，它的作用就是 线程1 业务还没有执行完，时间就过了，线程1 还想持有锁的话，就会启动一个watch dog后台线程，不断的延长锁key的生存时间。</p>
<p><code>注意</code> 正常这个看门狗线程是不启动的，还有就是这个看门狗启动后对整体性能也会有一定影响，所以不建议开启看门狗。</p>
<p>3.为啥使用lua脚本</p>
<p>如果你的业务逻辑复杂的话，通过封装在lua脚本中发送给redis，而且redis是单线程的，这样就保证这段复杂业务逻辑执行的<strong>原子性</strong>。</p>
<p>4.分布式锁的缺陷</p>
<p>Redis分布式锁会有个缺陷，就是在Redis哨兵模式下:</p>
<p><code>客户端1</code> 对某个<code>master节点</code>写入了redisson锁，此时会异步复制给对应的 slave节点。但是这个过程中一旦发生 master节点宕机，主备切换，slave节点从变为了 master节点。</p>
<p>这时<code>客户端2</code> 来尝试加锁的时候，在新的master节点上也能加锁，此时就会导致多个客户端对同一个分布式锁完成了加锁。</p>
<p>这时系统在业务语义上一定会出现问题，<strong>导致各种脏数据的产生</strong>。</p>
<p><code>缺陷</code>在哨兵模式或者主从模式下，如果 master实例宕机的时候，可能导致多个客户端同时完成加锁。</p>
]]></content>
      <tags>
        <tag>redis</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>简单吐槽一下xml</title>
    <url>/2022/01/08/%E7%AE%80%E5%8D%95%E5%90%90%E6%A7%BD%E4%B8%80%E4%B8%8Bxml/</url>
    <content><![CDATA[<blockquote>
<p>描述</p>
</blockquote>
<p>近期与供应商对接的时候，对方的接口还是比较稳定的xml接口，与当下流行的json的便捷性相比还是不太方便，中间我也使用了几种工具类，很难有完全适配的，下文我将讲述我解析xml的历程</p>
<blockquote>
<p>初次接触</p>
</blockquote>
<p>第一次接触xml接口是在对接物流渠道商的时候，当时他们使用的对接方式为soap格式，刚接触解析起来简直要了老命，什么是soap呢？是基于xml的简易协议，常用于webservie，它有自己的一套编码规则，如下</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/20161106222250124.png/" alt="在这里插入图片描述"></p>
<p>这种请求网上解析方式就很少，很多只有解析没有构造，文本也不太全，目前见过写的比较好的解析如下：<a href="https://blog.csdn.net/RUANJIAOXIAOZI/article/details/90770534">https://blog.csdn.net/RUANJIAOXIAOZI/article/details/90770534</a></p>
<p>当然还有xsd模式的xml<br><img src="https://img-blog.csdnimg.cn/03da286e53754f9cba71647d703c0c3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>因为这次讲的是xml解析，上面只是举个栗子，让你们体会一下xml的变种有多难😭</p>
<p>这种接口不过分的说，至少十年往上的架构了</p>
<blockquote>
<p>使用dom4j/jsoup解析</p>
</blockquote>
<p>dom4j应该是最经典解析xml的api了，性能优异，功能强大。但是使用起来还是略为麻烦，有点像用java的jsoup去爬取网页，需要一个一个节点的去找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dom4j获取xml的三种方式</span><br><span class="line"><span class="number">1.</span>读取xml文件，获得document对象</span><br><span class="line">    SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">    Document document = reader.read(<span class="keyword">new</span> File(<span class="string">&quot;test.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>直接解析xml形式的文本</span><br><span class="line">    String text = <span class="string">&quot;&lt;tag&gt;&lt;/tag&gt;&quot;</span>;</span><br><span class="line">	Document document = DocumentHelper.parseText(text);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>主动创建document对象</span><br><span class="line">    Document document = DocumentHelper.createDocument();</span><br><span class="line">	Element root = document.addElement(<span class="string">&quot;tag&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jsoup解析html方式</span><br><span class="line">Document document = Jsoup.parse(html);</span><br><span class="line">Element postList = document.getElementById(<span class="string">&quot;post_list&quot;</span>);</span><br><span class="line">Elements titleEle = postItem.select(<span class="string">&quot;.post_item_body a[class=&#x27;titlelnk&#x27;]&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>以上这种解析方式，属于所见即所得随时可取，但是往往可读性比较差，如图<br><img src="https://img-blog.csdnimg.cn/eabec9e14b4b4fa3b1ffb5459f8c3ca9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>当然如果你不嫌麻烦，jsoup也可以解析xml的😎</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JosupTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取Document对象，根据xml文档获取</span></span><br><span class="line">        <span class="comment">//2. 获取user.xml的path</span></span><br><span class="line">        String path = Objects.requireNonNull(JosupTest.class.getClassLoader().getResource(<span class="string">&quot;User.xml&quot;</span>)).getPath();</span><br><span class="line">        <span class="comment">//3. 解析xml文档，加载文档进内存，获取dom树-----&gt;Document</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 获取元素对象Elements(类型为ArrayList)</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//5. 测试获取元素的个数是否符合，xml文件中的个数</span></span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line">        <span class="comment">//5. 测试获取第一个元素</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//5. 测试获取第一个元素的文本内容</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        <span class="comment">//5. 测试获取第一个元素的名字是否正确</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>利用fastjson进行转换</p>
</blockquote>
<p>fastjson和gson这两种解析方式是我使用最多的两种解析方式</p>
<p>gson：快速，高效，代码量少，面向对象，但是相对fastjson和jackjson，它的各方面性能都被碾压</p>
<p>fastjson：性能最高，支持多种类型解析，由于fastjson太侧重性能，对于部分高级特性支持不够，有一部分自定义特性完全偏离了json和js规范，可能导致与其他框架不兼容的bug，并且文档缺失较多，而且代码缺少注释较为晦涩，近几年也出现过一些高危漏洞</p>
<p>如果要使用fastjson解析xml为json格式就需要使用工具类的形式进行转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service.zl.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Attribute;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xml工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sleep</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016-09-13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlTools</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String 转 org.dom4j.Document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> DocumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">strToDocument</span><span class="params">(String xml)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DocumentHelper.parseText(xml);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * org.dom4j.Document 转  com.alibaba.fastjson.JSONObject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> DocumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">documentToJSONObject</span><span class="params">(String xml)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementToJSONObject(strToDocument(xml).getRootElement());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * org.dom4j.Element 转  com.alibaba.fastjson.JSONObject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">elementToJSONObject</span><span class="params">(Element node)</span> </span>&#123;</span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="comment">// 当前节点的名称、文本内容和属性</span></span><br><span class="line">        List&lt;Attribute&gt; listAttr = node.attributes();<span class="comment">// 当前节点的所有属性的list</span></span><br><span class="line">        <span class="keyword">for</span> (Attribute attr : listAttr) &#123;<span class="comment">// 遍历当前节点的所有属性</span></span><br><span class="line">            result.put(attr.getName(), attr.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归遍历当前节点所有的子节点</span></span><br><span class="line">        List&lt;Element&gt; listElement = node.elements();<span class="comment">// 所有一级子节点的list</span></span><br><span class="line">        <span class="keyword">if</span> (!listElement.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Element e : listElement) &#123;<span class="comment">// 遍历所有一级子节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.attributes().isEmpty() &amp;&amp; e.elements().isEmpty()) <span class="comment">// 判断一级节点是否有属性和子节点</span></span><br><span class="line">                    result.put(e.getName(), e.getTextTrim());<span class="comment">// 沒有则将当前节点作为上级节点的属性对待</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!result.containsKey(e.getName())) <span class="comment">// 判断父节点是否存在该一级节点名称的属性</span></span><br><span class="line">                        result.put(e.getName(), <span class="keyword">new</span> JSONArray());<span class="comment">// 没有则创建</span></span><br><span class="line">                    ((JSONArray) result.get(e.getName())).add(elementToJSONObject(e));<span class="comment">// 将该一级节点放入该节点名称的属性对应的值中</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面工具类可以直接把xml转为json格式，非常方便，但是局限性太大   只能单向解析，所以最好的方式还是建立实体类的方式</p>
<blockquote>
<p>jaxb和jackson</p>
</blockquote>
<p>jaxb：它是一个业界的标准，是一项可以根据xml生成java类的技术。也可以根据xml实例文档反向生成java对象树的方法，与sax和dom不同，不需要了解xml解析技术，就两种操作<code>java对象转xml</code>和<code>xml转java对象</code></p>
<p>jackson：它性能介于fastjson和gson之间，但是它是目前最流行的api，规范性高，漏洞也没有fastjson多，还支持json和xml转换，目前市场上最好用的api之一</p>
<p>先来看看jaxb的解析xml方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement(name = &quot;ServicesError&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaoBaoBaseRequest</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String errorCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String errorMessage;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlElement(name = &quot;ErrorCode&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorCode</span><span class="params">(String errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlElement(name = &quot;ErrorMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorMessage</span><span class="params">(String errorMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorMessage = errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>jaxb的解析可以参考这篇文章：<a href="https://blog.csdn.net/wn084/article/details/80853587">https://blog.csdn.net/wn084/article/details/80853587</a></p>
<p>以下是jackjson的解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.model.taobao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.MapperFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.XmlMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"><span class="keyword">import</span> javax.xml.stream.XMLStreamException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: test &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * Description: &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * date: 2022/1/30 9:08&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, XMLStreamException </span>&#123;</span><br><span class="line">        String xml = <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;no\&quot; ?&gt;&lt;DataList Airlines=\&quot;ALL\&quot; Dpt=\&quot;KMG\&quot; Arr=\&quot;JJN\&quot; Date=\&quot;20220301\&quot; Carrier=\&quot;SC\&quot; Cabin = \&quot;U\&quot; Code=\&quot;SC9260\&quot;&gt;&lt;/DataList&gt;&quot;</span>;</span><br><span class="line">        DataList dataList1 = xmlToObject(xml, DataList.class);</span><br><span class="line">        System.out.println(JSON.toJSONString(dataList1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">objectToXml</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        XmlMapper xmlMapper= <span class="keyword">new</span> XmlMapper();</span><br><span class="line">        xmlMapper.setDefaultUseWrapper(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">/* 字段为null，自动忽略，不再序列化 */</span></span><br><span class="line">        xmlMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="comment">/* 设置转换模式 */</span></span><br><span class="line">        xmlMapper.enable(MapperFeature.USE_STD_BEAN_NAMING);</span><br><span class="line">        String resultXml = xmlMapper.writeValueAsString(object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultXml;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">xmlToObject</span><span class="params">(String xml,Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> IOException, XMLStreamException </span>&#123;</span><br><span class="line">        XmlMapper xmlMapper= <span class="keyword">new</span> XmlMapper();</span><br><span class="line">        xmlMapper.setDefaultUseWrapper(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">/* 字段为null，自动忽略，不再序列化 */</span></span><br><span class="line">        xmlMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="comment">/* 设置转换模式 */</span></span><br><span class="line">        xmlMapper.enable(MapperFeature.USE_STD_BEAN_NAMING);</span><br><span class="line">        <span class="keyword">return</span> xmlMapper.readValue(xml, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonXmlRootElement</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataList</span></span>&#123;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Airlines;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Dpt;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Arr;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Date;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Carrier;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Cabin;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAirlines</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Airlines;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAirlines</span><span class="params">(String airlines)</span> </span>&#123;</span><br><span class="line">        Airlines = airlines;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDpt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Dpt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDpt</span><span class="params">(String dpt)</span> </span>&#123;</span><br><span class="line">        Dpt = dpt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getArr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArr</span><span class="params">(String arr)</span> </span>&#123;</span><br><span class="line">        Arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">        Date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCarrier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Carrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarrier</span><span class="params">(String carrier)</span> </span>&#123;</span><br><span class="line">        Carrier = carrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCabin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Cabin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCabin</span><span class="params">(String cabin)</span> </span>&#123;</span><br><span class="line">        Cabin = cabin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        Code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>里面写了一个工具类：<code>objectToXml</code>和<code>xmlToObject</code>可以转换xml和实体类<br>==注意踩坑==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">坑一：大小写问题</span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonXmlProperty(localName = &quot;Apid&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer Apid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">getApid</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Apid</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">把注解放在成员变量上面，会解析出两个apid字段，一个是&lt;Apid&gt;&lt;/Apid&gt;,另一个是&lt;apid&gt;&lt;apid&gt;</span><br><span class="line"></span><br><span class="line">这是因为Jackson的处理机制会自动从属性方法上获取成员变量名，然而在java中，要么以驼峰命名，要么前两个字母都大写，才能用get方法正确地获取属性，所以使用getApid获取的成员名称就是apid，被jackson解析了出来。又因为成员变量上也加了注解，所以也会被解析。这就造成了xml文件生成了两个apid标签。正确的做法是把注解写到get方法上面</span><br><span class="line"></span><br><span class="line">正确写法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer Apid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonXmlProperty(localName = &quot;Apid&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">getApid</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Apid</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">坑二：Jackson封装list问题</span><br><span class="line"></span><br><span class="line">这个问题排查的时候异常困难……开始以为是封装的问题…………(吐槽一下，这个外包项目使用大量xml交互，但是又用不了webservice就得按照固定格式解析封装xml.....改动也贼困难。。。)……最后还是确定了是jackson的问题</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; APID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonXmlProperty(localName = &quot;APID&quot;)</span></span><br><span class="line"><span class="meta">@JacksonXmlElementWrapper(useWrapping = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getAPID</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> APID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">开始APID这个list一直被包装了两层！正确结果应该是&lt;APID&gt;<span class="number">111</span>&lt;/APID&gt;</span><br><span class="line"></span><br><span class="line">但是得到的是&lt;APID&gt;&lt;APID&gt;<span class="number">111</span>&lt;/APID&gt;&lt;/APID&gt;</span><br><span class="line"></span><br><span class="line">问题出在JacksonXmlElementWrapper</span><br><span class="line">如果不指定的话这个值默认是<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<p>目前感觉解析xml的api还是比较多的，针对xml的各种奇奇怪怪的格式，并不是都能兼容到，目前感觉最好用的还是jackson+Lombok能比较好的快速解决问题，当然要注意lombok的侵入性和jdk的版本选择最好的方式去解决，有些方式虽然不方便，但是它就是能解决问题……</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>初探xxljob</title>
    <url>/2022/02/13/%E5%88%9D%E6%8E%A2xxljob/</url>
    <content><![CDATA[<p><a href="http://gitee.com/xuxueli0323/xxl-job/releases">下载地址</a></p>
<p>搭建xxljob需要提前准备好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven3+</span><br><span class="line">jdk8+</span><br><span class="line">mysql5.7+</span><br></pre></td></tr></table></figure>

<h3 id="1-首先初始化SQL脚本建立必须的库和表"><a href="#1-首先初始化SQL脚本建立必须的库和表" class="headerlink" title="1.首先初始化SQL脚本建立必须的库和表"></a>1.首先初始化SQL脚本建立必须的库和表</h3><p><img src="https://img-blog.csdnimg.cn/41e36ffb828147959d17e4668e4fcde1.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="2-对于解压的文件分为三个模块"><a href="#2-对于解压的文件分为三个模块" class="headerlink" title="2.对于解压的文件分为三个模块"></a>2.对于解压的文件分为三个模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxl-job-admin：调度中心</span><br><span class="line">xxl-job-core：公共依赖</span><br><span class="line">xxl-job-executor-samples：执行器Sample示例（选择合适的版本执行器，可直接使用，也可以参考其并将现有项目改造成执行器）</span><br><span class="line">    ：xxl-job-executor-sample-springboot：Springboot版本，通过Springboot管理执行器，推荐这种方式；</span><br><span class="line">    ：xxl-job-executor-sample-frameless：无框架版本；</span><br></pre></td></tr></table></figure>

<p>其中：xxl-job-core是需要引入的源码包后续我们可以用以下形式引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xxl-job-admin是我们的调度中心，我们只需要把这个项目单独拿出来运行就行了，下面是运行结果</p>
<p><img src="https://img-blog.csdnimg.cn/aa9e342bd215486daaa05d8783dd5f35.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>xxl-job-executor-sample-springboot是我们后续用boot可以参照的模板，当然也可以直接用来使用</p>
<h3 id="3-xxl-job-admin配置"><a href="#3-xxl-job-admin配置" class="headerlink" title="3.xxl-job-admin配置"></a>3.xxl-job-admin配置</h3><p>先修改数据库的地址，也就是上面初始化的地址</p>
<p><label style="color:#843900">注意在数据库地址哪里加上时区属性，否则乱码</label></p>
<p><img src="https://img-blog.csdnimg.cn/5f6ad4958e8940e19977bdfbd74a6d56.png#pic_center" alt="在这里插入图片描述"></p>
<p>然后修改警报邮箱配置</p>
<p><img src="https://img-blog.csdnimg.cn/fdce9d1b4aa744269bdfcd5706c83abc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h3 id="4-警报邮箱配置"><a href="#4-警报邮箱配置" class="headerlink" title="4.警报邮箱配置"></a>4.警报邮箱配置</h3><p><img src="https://img-blog.csdnimg.cn/f59f8bc6828343909ba1c178b8ed6e72.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>去自己对应邮箱的设置里面找到smtp并开启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：spring.mail.password的密码是QQ邮箱开启SMTP的授权码而非QQ密码</span><br></pre></td></tr></table></figure>

<p><label style="color:#843900">这里需要注意不同邮箱有不同的收发件host</label></p>
<p>比如新浪</p>
<p>发件:POP3服务器为：pop3.sina.com.cn<br>收件:SMTP服务器为：smtp.sina.com.cn</p>
<p>qq</p>
<p>发件:POP3服务器为：pop.qq.com<br>收件:SMTP服务器为：smtp.qq.com</p>
<p>注意 不能自己邮箱发自己邮箱，否则收不到</p>
<p><img src="https://img-blog.csdnimg.cn/e0947d401d0f4f0d8bb6a64063f3d866.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>上面就是收件的内容</p>
<h3 id="5-boot整合xxljob"><a href="#5-boot整合xxljob" class="headerlink" title="5.boot整合xxljob"></a>5.boot整合xxljob</h3><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置文件整合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.executor.impl.XxlJobSpringExecutor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxlConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(xxlConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String adminAddresses;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.accessToken&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.ip&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logpath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String logPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logretentiondays&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> logRetentionDays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XxlJobSpringExecutor <span class="title">xxlJobExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);</span><br><span class="line">        XxlJobSpringExecutor xxlJobSpringExecutor = <span class="keyword">new</span> XxlJobSpringExecutor();</span><br><span class="line">        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">        xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">        xxlJobSpringExecutor.setAddress(address);</span><br><span class="line">        xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">        xxlJobSpringExecutor.setPort(port);</span><br><span class="line">        xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">        xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动端口和访问路径</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8089</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/todo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 调度中心（xxl-job-admin）的部署地址，如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；</span></span><br><span class="line"><span class="comment"># 为空则关闭自动注册；则需要手动注册</span></span><br><span class="line"><span class="meta">xxl.job.admin.addresses</span>=<span class="string">http://127.0.0.1:8080/xxl-job-admin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 执行器通讯TOKEN [选填]：非空时启用；</span></span><br><span class="line"><span class="meta">xxl.job.accessToken</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span></span><br><span class="line"><span class="meta">xxl.job.executor.appname</span>=<span class="string">job-to-do</span></span><br><span class="line"><span class="comment">### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span></span><br><span class="line"><span class="meta">xxl.job.executor.address</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;；</span></span><br><span class="line"><span class="meta">xxl.job.executor.ip</span>=<span class="string"></span></span><br><span class="line"><span class="meta">xxl.job.executor.port</span>=<span class="string">9998</span></span><br><span class="line"><span class="comment">### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span></span><br><span class="line"><span class="meta">xxl.job.executor.logpath</span>=<span class="string">/data/applogs/xxl-job/jobhandler</span></span><br><span class="line"><span class="comment">### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span></span><br><span class="line"><span class="meta">xxl.job.executor.logretentiondays</span>=<span class="string">30</span></span><br></pre></td></tr></table></figure>

<h3 id="6-定时任务的创建方式"><a href="#6-定时任务的创建方式" class="headerlink" title="6.定时任务的创建方式"></a>6.定时任务的创建方式</h3><p><img src="https://img-blog.csdnimg.cn/20210107153914491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3ajc3NjE5OTg0NQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>@XxlJob注解是新版本提供的方式，不需要继承</p>
<p>旧版方式是继承IJobHander然后重写execute方法</p>
<h3 id="7-界面介绍"><a href="#7-界面介绍" class="headerlink" title="7.界面介绍"></a>7.界面介绍</h3><p><img src="https://img-blog.csdnimg.cn/1d7d97d8e07041649fe41609182ff877.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/64509e90b93641e38373b498c1f68392.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p><label style="color:#843900"> 注意  当删除任务时，任务日志也会跟着删除 </label></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存双写不一致</title>
    <url>/2022/03/07/%E7%BC%93%E5%AD%98%E5%8F%8C%E5%86%99%E4%B8%8D%E4%B8%80%E8%87%B4/</url>
    <content><![CDATA[<h1 id="缓存数据库双写不一致"><a href="#缓存数据库双写不一致" class="headerlink" title="缓存数据库双写不一致"></a>缓存数据库双写不一致</h1><blockquote>
<p>高并发下缓存与数据库双写不一致解决方案</p>
</blockquote>
<p>正常的缓存数据库更新的时候应该是先执行线程1，然后执行线程2</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220307203941385.png/" alt="image-20220307203941385"></p>
<p>如果线程1卡顿了一下，这时就会造成数据库和缓存不一致的情况<code>线程1把线程2更新的缓存数据给覆盖了</code></p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220307204214243.png/" alt="image-20220307204214243"></p>
<h2 id="最开始的缓存不一致问题以及解决方案"><a href="#最开始的缓存不一致问题以及解决方案" class="headerlink" title="最开始的缓存不一致问题以及解决方案"></a>最开始的缓存不一致问题以及解决方案</h2><blockquote>
<p>问题：先修改数据库，再删除缓存，如果删除缓存失败了，那么会导致数据库中是新数据，缓存中是旧数据，数据出现不一致。</p>
</blockquote>
<p>解决思路：<br>　　先删除缓存，再修改数据库，如果删除缓存成功了修改数据库失败了，那么数据库中是旧数据，缓存中是空的，那么数据不会不一致，因为读的时候缓存没有，则读数据库中旧数据，然后更新到缓存中。</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220307205922621.png/" alt="image-20220307205922621"></p>
<h2 id="2、并发下数据缓存不一致问题分析"><a href="#2、并发下数据缓存不一致问题分析" class="headerlink" title="2、并发下数据缓存不一致问题分析"></a><strong>2、并发下数据缓存不一致问题分析</strong></h2><p>问题：<br>　　第一个请求数据发生变更，先删除了缓存，然后要去修改数据库，此时还没来得及去修改；<br>　　第二个请求过来去读缓存，发现缓存空了，去查询数据库，查到了修改前的旧数据，放到了缓存中；<br>　　第三个请求读取缓存中的数据 (此时第一个请求已经完成了数据库修改的操作)。<br>　　完了，数据库和缓存中的数据不一样了。。。。</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220307210140337.png/" alt="image-20220307210140337"></p>
<p>分析原因：</p>
<p>只有在对同一条数据并发读写的时候，才可能会出现这种问题。其实如果说你的并发量很低的话，特别是读并发很低，每天访问量就1万次，那么很少的情况下，会出现刚才描述的那种不一致的场景;但如果每天的是上亿的流量，每秒并发读是几万，每秒只要有数据更新的请求，就可能会出现上述的数据库+缓存不一致的情况。</p>
<h3 id="内存队列"><a href="#内存队列" class="headerlink" title="内存队列"></a>内存队列</h3><p>数据库的缓存更新与读取操作进行串行化，一个队列对应一个工作线程，每个工作线程串行拿到对应的操作，然后一条一条的执行。</p>
<p>  　　1. 首先我们的项目里维护一组线程池和内存队列。<br>  　　2. 更新数据的时候，根据数据的唯一标识将请求路由到一个jvm队列中，去更新数据库,然后请求结束。<br>  　　3. 读取数据的时候，先查缓存，如果发现数据不在缓存中，那么将根据唯一标识路由之后，也发送同一个jvm内部的队列中，重新读取数据库后更新缓存,最后请求结束。</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/1363214-20190929191217957-1916614649.png/" alt="img"></p>
<p>缺点：</p>
<p>1.实现起来麻烦，不同的key可能需要搞不同的队列</p>
<p>2.如果系统挂了，还得还原这些数据，如果出现了异常，还会造成脏数据</p>
<h3 id="延时双删"><a href="#延时双删" class="headerlink" title="延时双删"></a>延时双删</h3><p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220307214115094.png/" alt="image-20220307214115094"></p>
<p>延时双删方案执行步骤<br>1.删除redis<br>2.更新数据库<br>3.延时50毫秒<br>4.删除redis</p>
<ul>
<li>问题一：为何要延时50毫秒？<br>这是为了我们在第二次删除redis之前能完成数据库的更新操作。<br>假象一下，如果没有第三步操作时，有很大概率，在两次删除redis操作执行完毕之后，数据库的数据还没有更新，此时若有请求访问数据，便会出现我们一开始提到的那个问题。</li>
<li>问题二: 为何要两次删除redis?<br>如果我们没有第二次删除操作，此时有请求访问数据，有可能是访问的之前未做修改的redis数据，删除操作执行后，redis为空，有请求进来时，便会去访问数据库，此时数据库中的数据已是更新后的数据，保证了数据的一致性。</li>
</ul>
<p>缺点：</p>
<p>1.没有从根本上面去解决问题，如果更新缓存时间超过50ms，那么还是失败的，如果要一直保证休眠时间大于更新时间，这样会不会造成阻塞</p>
<p>2.如果一个接口请求有限制时间，这休眠时间会影响用户体验，影响接口的响应速度</p>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>如果加分布式锁可以直接保证每个线程的执行顺序，也是一种串行操作</p>
<p>这个还是比较推荐使用的，比内存串行实现简单，而且稳定</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220307215417929.png/" alt="image-20220307215417929"></p>
<p>缺点：</p>
<p>1.分布式锁会有性能问题，会导致并发量很低（<code>加锁永远不是最优的方案</code>）</p>
<h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><p>redisson中间里面实现了读写锁，读锁与读锁之间是不会互斥的和没加锁一样，写锁与写锁会互斥</p>
<p>一般都是读多写少</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/image-20220307220011598.png/" alt="image-20220307220011598"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般来说，就是如果你的系统<strong>不是严格要求</strong>缓存+数据库必须<strong>一致性</strong>的话，缓存可以稍微的跟数据库偶尔有不一致的情况，那最好<strong>不要</strong>上述的<strong>串行化</strong>的这个方案，因为读请求和写请求串行化，串到一个内存队列里去，这样是可以保证一定不会出现不一致的情况。但是，串行化之后，就会导致系统的<strong>吞吐量会大幅度的降低</strong>，你就需要用比正常情况下多几倍的机器去支撑线上的一个请求。</p>
<p>以上是本人对缓存数据库不一致情况的了解，本人能力有限，如有问题还望包含，也欢迎指正。谢谢！</p>
]]></content>
      <tags>
        <tag>redis</tag>
        <tag>数据库</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>解决微信小程序键盘上移</title>
    <url>/2022/02/16/%E8%A7%A3%E5%86%B3%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%94%AE%E7%9B%98%E4%B8%8A%E7%A7%BB/</url>
    <content><![CDATA[<p>在微信开发者工具没有出现上移的情况，但是一到真机调试就出现了，把页面设置固定布局也不管用<br><img src="https://img-blog.csdnimg.cn/ee256319d57f47979e4671c18a10ffc1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后查询微信官方文档，是这样解释的<br>小程序在input框输入时，默认会开启自动上推的功能，但是有的时候会出现卡顿的现象，想关闭自动上推，把<br><label style="color:#843900">adjust-position设置为false</label>就可以了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-row</span>  <span class="attr">gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-col</span> <span class="attr">span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">          <span class="attr">left-icon</span>=<span class="string">&quot;eye-o&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">adjust-position</span>=<span class="string">&quot;false&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">model:value</span>=<span class="string">&quot;&#123;&#123;password&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-col</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">van-row</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按道理应该就不会出现了，结果就是不生效，经过几轮瞎搞后才发现需要加<code>&#123;&#123;&#125;&#125;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-row</span>  <span class="attr">gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">van-col</span> <span class="attr">span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">         <span class="attr">left-icon</span>=<span class="string">&quot;eye-o&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">adjust-position</span>=<span class="string">&quot;&#123;&#123; false &#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">model:value</span>=<span class="string">&quot;&#123;&#123;password&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">van-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-row</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>请大家谨慎踩坑</p>
]]></content>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>

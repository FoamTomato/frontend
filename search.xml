<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>初探xxljob</title>
    <url>/2022/02/13/%E5%88%9D%E6%8E%A2xxljob/</url>
    <content><![CDATA[<p><a href="http://gitee.com/xuxueli0323/xxl-job/releases">下载地址</a></p>
<p>搭建xxljob需要提前准备好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven3+</span><br><span class="line">jdk8+</span><br><span class="line">mysql5.7+</span><br></pre></td></tr></table></figure>

<h3 id="1-首先初始化SQL脚本建立必须的库和表"><a href="#1-首先初始化SQL脚本建立必须的库和表" class="headerlink" title="1.首先初始化SQL脚本建立必须的库和表"></a>1.首先初始化SQL脚本建立必须的库和表</h3><p><img src="https://img-blog.csdnimg.cn/41e36ffb828147959d17e4668e4fcde1.png#pic_center" alt="在这里插入图片描述"></p>
<h3 id="2-对于解压的文件分为三个模块"><a href="#2-对于解压的文件分为三个模块" class="headerlink" title="2.对于解压的文件分为三个模块"></a>2.对于解压的文件分为三个模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxl-job-admin：调度中心</span><br><span class="line">xxl-job-core：公共依赖</span><br><span class="line">xxl-job-executor-samples：执行器Sample示例（选择合适的版本执行器，可直接使用，也可以参考其并将现有项目改造成执行器）</span><br><span class="line">    ：xxl-job-executor-sample-springboot：Springboot版本，通过Springboot管理执行器，推荐这种方式；</span><br><span class="line">    ：xxl-job-executor-sample-frameless：无框架版本；</span><br></pre></td></tr></table></figure>

<p>其中：xxl-job-core是需要引入的源码包后续我们可以用以下形式引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xxl-job-admin是我们的调度中心，我们只需要把这个项目单独拿出来运行就行了，下面是运行结果</p>
<p><img src="https://img-blog.csdnimg.cn/aa9e342bd215486daaa05d8783dd5f35.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>xxl-job-executor-sample-springboot是我们后续用boot可以参照的模板，当然也可以直接用来使用</p>
<h3 id="3-xxl-job-admin配置"><a href="#3-xxl-job-admin配置" class="headerlink" title="3.xxl-job-admin配置"></a>3.xxl-job-admin配置</h3><p>先修改数据库的地址，也就是上面初始化的地址</p>
<p><label style="color:#843900">注意在数据库地址哪里加上时区属性，否则乱码</label></p>
<p><img src="https://img-blog.csdnimg.cn/5f6ad4958e8940e19977bdfbd74a6d56.png#pic_center" alt="在这里插入图片描述"></p>
<p>然后修改警报邮箱配置</p>
<p><img src="https://img-blog.csdnimg.cn/fdce9d1b4aa744269bdfcd5706c83abc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<h3 id="4-警报邮箱配置"><a href="#4-警报邮箱配置" class="headerlink" title="4.警报邮箱配置"></a>4.警报邮箱配置</h3><p><img src="https://img-blog.csdnimg.cn/f59f8bc6828343909ba1c178b8ed6e72.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>去自己对应邮箱的设置里面找到smtp并开启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：spring.mail.password的密码是QQ邮箱开启SMTP的授权码而非QQ密码</span><br></pre></td></tr></table></figure>

<p><label style="color:#843900">这里需要注意不同邮箱有不同的收发件host</label></p>
<p>比如新浪</p>
<p>发件:POP3服务器为：pop3.sina.com.cn<br>收件:SMTP服务器为：smtp.sina.com.cn</p>
<p>qq</p>
<p>发件:POP3服务器为：pop.qq.com<br>收件:SMTP服务器为：smtp.qq.com</p>
<p>注意 不能自己邮箱发自己邮箱，否则收不到</p>
<p><img src="https://img-blog.csdnimg.cn/e0947d401d0f4f0d8bb6a64063f3d866.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>上面就是收件的内容</p>
<h3 id="5-boot整合xxljob"><a href="#5-boot整合xxljob" class="headerlink" title="5.boot整合xxljob"></a>5.boot整合xxljob</h3><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置文件整合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.executor.impl.XxlJobSpringExecutor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxlConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(xxlConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String adminAddresses;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.accessToken&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.ip&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logpath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String logPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logretentiondays&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> logRetentionDays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XxlJobSpringExecutor <span class="title">xxlJobExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);</span><br><span class="line">        XxlJobSpringExecutor xxlJobSpringExecutor = <span class="keyword">new</span> XxlJobSpringExecutor();</span><br><span class="line">        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">        xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">        xxlJobSpringExecutor.setAddress(address);</span><br><span class="line">        xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">        xxlJobSpringExecutor.setPort(port);</span><br><span class="line">        xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">        xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动端口和访问路径</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8089</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/todo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 调度中心（xxl-job-admin）的部署地址，如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；</span></span><br><span class="line"><span class="comment"># 为空则关闭自动注册；则需要手动注册</span></span><br><span class="line"><span class="meta">xxl.job.admin.addresses</span>=<span class="string">http://127.0.0.1:8080/xxl-job-admin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 执行器通讯TOKEN [选填]：非空时启用；</span></span><br><span class="line"><span class="meta">xxl.job.accessToken</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span></span><br><span class="line"><span class="meta">xxl.job.executor.appname</span>=<span class="string">job-to-do</span></span><br><span class="line"><span class="comment">### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span></span><br><span class="line"><span class="meta">xxl.job.executor.address</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;；</span></span><br><span class="line"><span class="meta">xxl.job.executor.ip</span>=<span class="string"></span></span><br><span class="line"><span class="meta">xxl.job.executor.port</span>=<span class="string">9998</span></span><br><span class="line"><span class="comment">### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span></span><br><span class="line"><span class="meta">xxl.job.executor.logpath</span>=<span class="string">/data/applogs/xxl-job/jobhandler</span></span><br><span class="line"><span class="comment">### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span></span><br><span class="line"><span class="meta">xxl.job.executor.logretentiondays</span>=<span class="string">30</span></span><br></pre></td></tr></table></figure>

<h3 id="6-定时任务的创建方式"><a href="#6-定时任务的创建方式" class="headerlink" title="6.定时任务的创建方式"></a>6.定时任务的创建方式</h3><p><img src="https://img-blog.csdnimg.cn/20210107153914491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3ajc3NjE5OTg0NQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>@XxlJob注解是新版本提供的方式，不需要继承</p>
<p>旧版方式是继承IJobHander然后重写execute方法</p>
<h3 id="7-界面介绍"><a href="#7-界面介绍" class="headerlink" title="7.界面介绍"></a>7.界面介绍</h3><p><img src="https://img-blog.csdnimg.cn/1d7d97d8e07041649fe41609182ff877.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/64509e90b93641e38373b498c1f68392.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p><label style="color:#843900"> 注意  当删除任务时，任务日志也会跟着删除 </label></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>简单吐槽一下xml</title>
    <url>/2022/01/08/%E6%96%B0%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<blockquote>
<p>描述</p>
</blockquote>
<p>近期与供应商对接的时候，对方的接口还是比较稳定的xml接口，与当下流行的json的便捷性相比还是不太方便，中间我也使用了几种工具类，很难有完全适配的，下文我将讲述我解析xml的历程</p>
<blockquote>
<p>初次接触</p>
</blockquote>
<p>第一次接触xml接口是在对接物流渠道商的时候，当时他们使用的对接方式为soap格式，刚接触解析起来简直要了老命，什么是soap呢？是基于xml的简易协议，常用于webservie，它有自己的一套编码规则，如下</p>
<p><img src="https://gitee.com/foam077/images/raw/master/img/20161106222250124.png" alt="在这里插入图片描述"></p>
<p>这种请求网上解析方式就很少，很多只有解析没有构造，文本也不太全，目前见过写的比较好的解析如下：<a href="https://blog.csdn.net/RUANJIAOXIAOZI/article/details/90770534">https://blog.csdn.net/RUANJIAOXIAOZI/article/details/90770534</a></p>
<p>当然还有xsd模式的xml<br><img src="https://img-blog.csdnimg.cn/03da286e53754f9cba71647d703c0c3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>因为这次讲的是xml解析，上面只是举个栗子，让你们体会一下xml的变种有多难😭</p>
<p>这种接口不过分的说，至少十年往上的架构了</p>
<blockquote>
<p>使用dom4j/jsoup解析</p>
</blockquote>
<p>dom4j应该是最经典解析xml的api了，性能优异，功能强大。但是使用起来还是略为麻烦，有点像用java的jsoup去爬取网页，需要一个一个节点的去找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dom4j获取xml的三种方式</span><br><span class="line"><span class="number">1.</span>读取xml文件，获得document对象</span><br><span class="line">    SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">    Document document = reader.read(<span class="keyword">new</span> File(<span class="string">&quot;test.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>直接解析xml形式的文本</span><br><span class="line">    String text = <span class="string">&quot;&lt;tag&gt;&lt;/tag&gt;&quot;</span>;</span><br><span class="line">	Document document = DocumentHelper.parseText(text);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>主动创建document对象</span><br><span class="line">    Document document = DocumentHelper.createDocument();</span><br><span class="line">	Element root = document.addElement(<span class="string">&quot;tag&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jsoup解析html方式</span><br><span class="line">Document document = Jsoup.parse(html);</span><br><span class="line">Element postList = document.getElementById(<span class="string">&quot;post_list&quot;</span>);</span><br><span class="line">Elements titleEle = postItem.select(<span class="string">&quot;.post_item_body a[class=&#x27;titlelnk&#x27;]&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>以上这种解析方式，属于所见即所得随时可取，但是往往可读性比较差，如图<br><img src="https://img-blog.csdnimg.cn/eabec9e14b4b4fa3b1ffb5459f8c3ca9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>
<p>当然如果你不嫌麻烦，jsoup也可以解析xml的😎</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JosupTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取Document对象，根据xml文档获取</span></span><br><span class="line">        <span class="comment">//2. 获取user.xml的path</span></span><br><span class="line">        String path = Objects.requireNonNull(JosupTest.class.getClassLoader().getResource(<span class="string">&quot;User.xml&quot;</span>)).getPath();</span><br><span class="line">        <span class="comment">//3. 解析xml文档，加载文档进内存，获取dom树-----&gt;Document</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 获取元素对象Elements(类型为ArrayList)</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//5. 测试获取元素的个数是否符合，xml文件中的个数</span></span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line">        <span class="comment">//5. 测试获取第一个元素</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//5. 测试获取第一个元素的文本内容</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        <span class="comment">//5. 测试获取第一个元素的名字是否正确</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>利用fastjson进行转换</p>
</blockquote>
<p>fastjson和gson这两种解析方式是我使用最多的两种解析方式</p>
<p>gson：快速，高效，代码量少，面向对象，但是相对fastjson和jackjson，它的各方面性能都被碾压</p>
<p>fastjson：性能最高，支持多种类型解析，由于fastjson太侧重性能，对于部分高级特性支持不够，有一部分自定义特性完全偏离了json和js规范，可能导致与其他框架不兼容的bug，并且文档缺失较多，而且代码缺少注释较为晦涩，近几年也出现过一些高危漏洞</p>
<p>如果要使用fastjson解析xml为json格式就需要使用工具类的形式进行转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service.zl.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Attribute;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xml工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sleep</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016-09-13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlTools</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String 转 org.dom4j.Document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> DocumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">strToDocument</span><span class="params">(String xml)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DocumentHelper.parseText(xml);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * org.dom4j.Document 转  com.alibaba.fastjson.JSONObject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> DocumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">documentToJSONObject</span><span class="params">(String xml)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementToJSONObject(strToDocument(xml).getRootElement());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * org.dom4j.Element 转  com.alibaba.fastjson.JSONObject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">elementToJSONObject</span><span class="params">(Element node)</span> </span>&#123;</span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="comment">// 当前节点的名称、文本内容和属性</span></span><br><span class="line">        List&lt;Attribute&gt; listAttr = node.attributes();<span class="comment">// 当前节点的所有属性的list</span></span><br><span class="line">        <span class="keyword">for</span> (Attribute attr : listAttr) &#123;<span class="comment">// 遍历当前节点的所有属性</span></span><br><span class="line">            result.put(attr.getName(), attr.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归遍历当前节点所有的子节点</span></span><br><span class="line">        List&lt;Element&gt; listElement = node.elements();<span class="comment">// 所有一级子节点的list</span></span><br><span class="line">        <span class="keyword">if</span> (!listElement.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Element e : listElement) &#123;<span class="comment">// 遍历所有一级子节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.attributes().isEmpty() &amp;&amp; e.elements().isEmpty()) <span class="comment">// 判断一级节点是否有属性和子节点</span></span><br><span class="line">                    result.put(e.getName(), e.getTextTrim());<span class="comment">// 沒有则将当前节点作为上级节点的属性对待</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!result.containsKey(e.getName())) <span class="comment">// 判断父节点是否存在该一级节点名称的属性</span></span><br><span class="line">                        result.put(e.getName(), <span class="keyword">new</span> JSONArray());<span class="comment">// 没有则创建</span></span><br><span class="line">                    ((JSONArray) result.get(e.getName())).add(elementToJSONObject(e));<span class="comment">// 将该一级节点放入该节点名称的属性对应的值中</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面工具类可以直接把xml转为json格式，非常方便，但是局限性太大   只能单向解析，所以最好的方式还是建立实体类的方式</p>
<blockquote>
<p>jaxb和jackson</p>
</blockquote>
<p>jaxb：它是一个业界的标准，是一项可以根据xml生成java类的技术。也可以根据xml实例文档反向生成java对象树的方法，与sax和dom不同，不需要了解xml解析技术，就两种操作<code>java对象转xml</code>和<code>xml转java对象</code></p>
<p>jackson：它性能介于fastjson和gson之间，但是它是目前最流行的api，规范性高，漏洞也没有fastjson多，还支持json和xml转换，目前市场上最好用的api之一</p>
<p>先来看看jaxb的解析xml方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement(name = &quot;ServicesError&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaoBaoBaseRequest</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String errorCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String errorMessage;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlElement(name = &quot;ErrorCode&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorCode</span><span class="params">(String errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlElement(name = &quot;ErrorMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorMessage</span><span class="params">(String errorMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorMessage = errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>jaxb的解析可以参考这篇文章：<a href="https://blog.csdn.net/wn084/article/details/80853587">https://blog.csdn.net/wn084/article/details/80853587</a></p>
<p>以下是jackjson的解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.model.taobao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.MapperFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.XmlMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"><span class="keyword">import</span> javax.xml.stream.XMLStreamException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: test &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * Description: &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * date: 2022/1/30 9:08&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, XMLStreamException </span>&#123;</span><br><span class="line">        String xml = <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;no\&quot; ?&gt;&lt;DataList Airlines=\&quot;ALL\&quot; Dpt=\&quot;KMG\&quot; Arr=\&quot;JJN\&quot; Date=\&quot;20220301\&quot; Carrier=\&quot;SC\&quot; Cabin = \&quot;U\&quot; Code=\&quot;SC9260\&quot;&gt;&lt;/DataList&gt;&quot;</span>;</span><br><span class="line">        DataList dataList1 = xmlToObject(xml, DataList.class);</span><br><span class="line">        System.out.println(JSON.toJSONString(dataList1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">objectToXml</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        XmlMapper xmlMapper= <span class="keyword">new</span> XmlMapper();</span><br><span class="line">        xmlMapper.setDefaultUseWrapper(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">/* 字段为null，自动忽略，不再序列化 */</span></span><br><span class="line">        xmlMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="comment">/* 设置转换模式 */</span></span><br><span class="line">        xmlMapper.enable(MapperFeature.USE_STD_BEAN_NAMING);</span><br><span class="line">        String resultXml = xmlMapper.writeValueAsString(object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultXml;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">xmlToObject</span><span class="params">(String xml,Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> IOException, XMLStreamException </span>&#123;</span><br><span class="line">        XmlMapper xmlMapper= <span class="keyword">new</span> XmlMapper();</span><br><span class="line">        xmlMapper.setDefaultUseWrapper(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">/* 字段为null，自动忽略，不再序列化 */</span></span><br><span class="line">        xmlMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="comment">/* 设置转换模式 */</span></span><br><span class="line">        xmlMapper.enable(MapperFeature.USE_STD_BEAN_NAMING);</span><br><span class="line">        <span class="keyword">return</span> xmlMapper.readValue(xml, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonXmlRootElement</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataList</span></span>&#123;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Airlines;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Dpt;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Arr;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Date;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Carrier;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Cabin;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String Code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAirlines</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Airlines;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAirlines</span><span class="params">(String airlines)</span> </span>&#123;</span><br><span class="line">        Airlines = airlines;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDpt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Dpt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDpt</span><span class="params">(String dpt)</span> </span>&#123;</span><br><span class="line">        Dpt = dpt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getArr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArr</span><span class="params">(String arr)</span> </span>&#123;</span><br><span class="line">        Arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">        Date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCarrier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Carrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarrier</span><span class="params">(String carrier)</span> </span>&#123;</span><br><span class="line">        Carrier = carrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCabin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Cabin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCabin</span><span class="params">(String cabin)</span> </span>&#123;</span><br><span class="line">        Cabin = cabin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        Code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>里面写了一个工具类：<code>objectToXml</code>和<code>xmlToObject</code>可以转换xml和实体类<br>==注意踩坑==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">坑一：大小写问题</span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonXmlProperty(localName = &quot;Apid&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer Apid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">getApid</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Apid</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">把注解放在成员变量上面，会解析出两个apid字段，一个是&lt;Apid&gt;&lt;/Apid&gt;,另一个是&lt;apid&gt;&lt;apid&gt;</span><br><span class="line"></span><br><span class="line">这是因为Jackson的处理机制会自动从属性方法上获取成员变量名，然而在java中，要么以驼峰命名，要么前两个字母都大写，才能用get方法正确地获取属性，所以使用getApid获取的成员名称就是apid，被jackson解析了出来。又因为成员变量上也加了注解，所以也会被解析。这就造成了xml文件生成了两个apid标签。正确的做法是把注解写到get方法上面</span><br><span class="line"></span><br><span class="line">正确写法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer Apid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonXmlProperty(localName = &quot;Apid&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">getApid</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Apid</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">坑二：Jackson封装list问题</span><br><span class="line"></span><br><span class="line">这个问题排查的时候异常困难……开始以为是封装的问题…………(吐槽一下，这个外包项目使用大量xml交互，但是又用不了webservice就得按照固定格式解析封装xml.....改动也贼困难。。。)……最后还是确定了是jackson的问题</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; APID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonXmlProperty(localName = &quot;APID&quot;)</span></span><br><span class="line"><span class="meta">@JacksonXmlElementWrapper(useWrapping = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getAPID</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> APID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">开始APID这个list一直被包装了两层！正确结果应该是&lt;APID&gt;<span class="number">111</span>&lt;/APID&gt;</span><br><span class="line"></span><br><span class="line">但是得到的是&lt;APID&gt;&lt;APID&gt;<span class="number">111</span>&lt;/APID&gt;&lt;/APID&gt;</span><br><span class="line"></span><br><span class="line">问题出在JacksonXmlElementWrapper</span><br><span class="line">如果不指定的话这个值默认是<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
</blockquote>
<p>目前感觉解析xml的api还是比较多的，针对xml的各种奇奇怪怪的格式，并不是都能兼容到，目前感觉最好用的还是jackson+Lombok能比较好的快速解决问题，当然要注意lombok的侵入性和jdk的版本选择最好的方式去解决，有些方式虽然不方便，但是它就是能解决问题……</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>解决微信小程序键盘上移</title>
    <url>/2022/02/16/%E8%A7%A3%E5%86%B3%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%94%AE%E7%9B%98%E4%B8%8A%E7%A7%BB/</url>
    <content><![CDATA[<p>在微信开发者工具没有出现上移的情况，但是一到真机调试就出现了，把页面设置固定布局也不管用<br><img src="https://img-blog.csdnimg.cn/ee256319d57f47979e4671c18a10ffc1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARm9hbeeVquiMhA==,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后查询微信官方文档，是这样解释的<br>小程序在input框输入时，默认会开启自动上推的功能，但是有的时候会出现卡顿的现象，想关闭自动上推，把<br><label style="color:#843900">adjust-position设置为false</label>就可以了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-row</span>  <span class="attr">gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-col</span> <span class="attr">span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">          <span class="attr">left-icon</span>=<span class="string">&quot;eye-o&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">adjust-position</span>=<span class="string">&quot;false&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">model:value</span>=<span class="string">&quot;&#123;&#123;password&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">van-col</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">van-row</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按道理应该就不会出现了，结果就是不生效，经过几轮瞎搞后才发现需要加<code>&#123;&#123;&#125;&#125;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-row</span>  <span class="attr">gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">van-col</span> <span class="attr">span</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-field</span></span></span><br><span class="line"><span class="tag">         <span class="attr">left-icon</span>=<span class="string">&quot;eye-o&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">adjust-position</span>=<span class="string">&quot;&#123;&#123; false &#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">model:value</span>=<span class="string">&quot;&#123;&#123;password&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">van-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-row</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>请大家谨慎踩坑</p>
]]></content>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>
